/* vim: set ts=2 sts=2 et sw=2: */
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
/**
 * nsINetworkSeer - learn about pages users visit, and allow us to take
 *                  predictive actions upon future visits.
 *                  NOTE: nsINetworkSeer should only be used on the main thread
 */

#include "nsISupports.idl"

interface nsIURI;
interface nsILoadContext;
interface nsINetworkSeerVerifier;

typedef unsigned long SeerPredictReason;
typedef unsigned long SeerLearnReason;

[scriptable, uuid(884a39a0-a3ed-4855-826a-fabb73ae878d)]
interface nsINetworkSeer : nsISupports
{
  /**
   * Prediction reasons
   *
   * PREDICT_LINK - we are being asked to take predictive action because
   * the user is hovering over a link.
   *
   * PREDICT_LOAD - we are being asked to take predictive action because
   * the user has initiated a pageload.
   *
   * PREDICT_STARTUP - we are being asked to take predictive action
   * because the browser is starting up.
   */
  const SeerPredictReason PREDICT_LINK = 0;
  const SeerPredictReason PREDICT_LOAD = 1;
  const SeerPredictReason PREDICT_STARTUP = 2;

  /**
   * Start taking predictive actions
   *
   * Calling this will cause the seer to (possibly) start
   * taking actions such as DNS prefetch and/or TCP preconnect based on
   * (1) the host name that we are given, and (2) the reason we are being
   * asked to take actions.
   *
   * @param target - The URI we are being asked to take actions based on.
   * @param referer - The URI that is currently loaded. This is so we can avoid
   *   doing predictive actions for link hover on an HTTPS page (for example).
   * @param reason - The reason we are being asked to take actions. Can be
   *   any of the PREDICT_* values above.
   *   In the case of PREDICT_LINK, target should be the URI of the link
   *   that is being hovered over, and referer should be the URI of the page on
   *   which the link appears.
   *   In the case of PREDICT_LOAD, target should be the URI of the page that
   *   is being loaded and referer should be null.
   *   In the case of PREDICT_STARTUP, both target and referer should be null.
   */
  void predict(in nsIURI target,
               in nsIURI referer,
               in SeerPredictReason reason,
               in nsILoadContext loadContext,
               in nsINetworkSeerVerifier verifier);


  /*
   * Reasons we are learning something
   *
   * LEARN_LOAD_TOPLEVEL - we are learning about the toplevel resource of a
   *                       pageload (NOTE: this should ONLY be used by tests)
   *
   * LEARN_LOAD_SUBRESOURCE - we are learning a subresource from a pageload
   *
   * LEARN_LOAD_REDIRECT - we are learning about the re-direct of a URI
   *
   * LEARN_STARTUP - we are learning about a page loaded during startup
   */
  const SeerLearnReason LEARN_LOAD_TOPLEVEL = 0;
  const SeerLearnReason LEARN_LOAD_SUBRESOURCE = 1;
  const SeerLearnReason LEARN_LOAD_REDIRECT = 2;
  const SeerLearnReason LEARN_STARTUP = 3;

  /**
   * Add to our compendium of knowledge
   *
   * This adds to our prediction database to make things (hopefully)
   * smarter next time we predict something.
   *
   * @param target - The URI that was loaded that we are keeping track of.
   * @param referer - The URI that caused target to be loaded (for page loads).
   * @param reason - The reason we are learning this bit of knowledge.
   *   Reason can be any of the LEARN_* values.
   *   In the case of LEARN_LOAD_SUBRESOURCE, target should be the URI of a
   *   subresource of a page, and referer should be the top-level URI (which may
   *   have been redirected to).
   *   In the case of LEARN_LOAD_REDIRECT, target is the NEW URI of a top-level
   *   resource that was redirected to, and referer is the ORIGINAL URI of said
   *   top-level resource.
   *   In the case of LEARN_STARTUP, target should be the URI of a page
   *   that was loaded immediately after browser startup, and referer should
   *   be null.
   */
  void learn(in nsIURI target,
             in nsIURI referer,
             in SeerLearnReason reason,
             in nsILoadContext loadContext);

  /**
   * Clear out all our learned knowledge
   *
   * This removes everything from our database so that any predictions begun
   * after this completes will start from a blank slate.
   */
  void reset();
};
